server { # Redirect http requests to https

	listen 80;
	server_name intwebred.alamy.* intwebred.alamyimages.*;

	proxy_cache alamyweb_cache; # Use the cache area defined in the http config
	
	limit_req zone=http_req_limit burst=50 nodelay; # Default rate limit defined in http config
	limit_req zone=http_req_limit_exceptions burst=50 nodelay; # Excempted rate limit defined in http config

	return 301 https://$host$request_uri;

}

server { 
	
	listen 443 ssl http2;
	server_name ~^(intwebred)[.](alamy|alamyimages)[.](?<tld>.+)$; # All intwebred.alamy.* & alamyimages.* requests will use this config, <tld> named regex group used to extract domain requested

	proxy_cache alamyweb_cache; # Use the cache area defined in the http config
	
	limit_req zone=http_req_limit burst=50 nodelay; # Default rate limit defined in http config
	limit_req zone=http_req_limit_exceptions burst=50 nodelay; # Excempted rate limit defined in http config

	# Default Nginx behaviour, DNS is only resolved on startup. Setting external upstreams as variables so DNS is re-resolved according to TTLs
	set $sitemaps_s3 "alamy-sitemaps.s3-eu-west-1.amazonaws.com";
	set $downloadhandler_dev "downloadhandlertest.alamy.com";

	location ~* ^/(geoip[.]asp|mediacomp/StopWords[.]aspx) { # Block external access to specific files
		
		proxy_pass http://web_servers;

		error_page 401 403 =301 $scheme://$host; # Redirect denied requests to homepage

		include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
	}

	location /sitemaps/ { # Sitemaps redirected to S3
		proxy_no_cache $host; # Proxy_no_cache will always be 'true' because $host always has a value, as a result content in this location will not be cached by Nginx
		proxy_set_header Host $sitemaps_s3;
		proxy_pass https://$sitemaps_s3;

		# $tld extracted from requested host is used to build forwarded S3 request for sitemap
		rewrite ^/sitemaps/(.*) /$tld/$1 break; # Using a variable changes the way forward requests are created, rewrite used to fix - see https://tenzer.dk/nginx-with-dynamic-upstreams/
	
		include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
	}

	location ~* ^/(downloads/en/video|freedownloads)/ { # Download server rules
		proxy_pass http://download_servers;

		include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
	}

        location /downloads/ { # Download server rules
                proxy_set_header Host $downloadhandler_dev;
                proxy_pass http://$downloadhandler_dev;
                include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
        }

	location ~* ^/(category|categories|galleries)/(video-gallery[.]asp|galleries[.]asp|footage-gallery[.]asp|default[.]asp|blank[.]html) { # SearchWeb server exception rules
		proxy_pass http://web_servers;

		include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
	}

	location ~* ^/(search[.]html|stock-photo/|search/|galleries/|category/|categories/|photos-images/|fotos-imagenes/|fotos-imagens/|imagenes/|fotos-bilder/|archivio-fotografico/|fotos-immagini/) { # SearchWeb server rules
		proxy_pass http://search_servers;
	}

	location ~* "^/(foto-(.*)[.]html|photo-image-(.*)[.]html|foto-immagine-(.*)[.]html|foto-imagem-(.*)[.]html|.+?-image[0-9]{3,12}[.]html)" { # Image page rule exists only so that image pages can be exempted from content rewrite
		proxy_pass http://web_servers;
	}

	location / { # Default location
		proxy_pass http://web_servers;

		include /etc/nginx/conf.d/includes/subs_filter.conf; # Rewrite content for .com & .de http > https
	}

	include /etc/nginx/conf.d/includes/error_page.conf; # Include error page location blocks
	
}
